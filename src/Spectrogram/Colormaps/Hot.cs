using System;

namespace Spectrogram.Colormaps
{
    class Hot : IColormap
    {
        public (byte r, byte g, byte b) GetRGB(byte value)
        {
            byte[] bytes = BitConverter.GetBytes(rgb[value]);
            return (bytes[2], bytes[1], bytes[0]);
        }

        // RGB values are derived from the Hot colormap in Matplotlib 3.2.1 (https://matplotlib.org)
        private readonly int[] rgb =
        {
            00655360, 00851968, 00983040, 01179648, 01376256, 01507328, 01703936, 01835008, 
            02031616, 02228224, 02359296, 02555904, 02752512, 02883584, 03080192, 03211264, 
            03407872, 03604480, 03735552, 03932160, 04128768, 04259840, 04456448, 04587520, 
            04784128, 04980736, 05111808, 05308416, 05505024, 05636096, 05832704, 05963776, 
            06160384, 06356992, 06488064, 06684672, 06881280, 07012352, 07208960, 07340032, 
            07536640, 07733248, 07864320, 08060928, 08257536, 08388608, 08585216, 08716288, 
            08912896, 09109504, 09240576, 09437184, 09633792, 09764864, 09961472, 10092544, 
            10289152, 10485760, 10616832, 10813440, 11010048, 11141120, 11337728, 11468800, 
            11665408, 11862016, 11993088, 12189696, 12386304, 12517376, 12713984, 12845056, 
            13041664, 13238272, 13369344, 13565952, 13762560, 13893632, 14090240, 14221312, 
            14417920, 14614528, 14745600, 14942208, 15138816, 15269888, 15466496, 15597568, 
            15794176, 15990784, 16121856, 16318464, 16515072, 16646144, 16712192, 16712960, 
            16713472, 16714240, 16714752, 16715520, 16716288, 16716800, 16717568, 16718336, 
            16718848, 16719616, 16720128, 16720896, 16721664, 16722176, 16722944, 16723712, 
            16724224, 16724992, 16725504, 16726272, 16727040, 16727552, 16728320, 16729088, 
            16729600, 16730368, 16730880, 16731648, 16732416, 16732928, 16733696, 16734464, 
            16734976, 16735744, 16736256, 16737024, 16737792, 16738304, 16739072, 16739840, 
            16740352, 16741120, 16741632, 16742400, 16743168, 16743680, 16744448, 16745216, 
            16745728, 16746496, 16747008, 16747776, 16748544, 16749056, 16749824, 16750336, 
            16751104, 16751872, 16752384, 16753152, 16753920, 16754432, 16755200, 16755712, 
            16756480, 16757248, 16757760, 16758528, 16759296, 16759808, 16760576, 16761088, 
            16761856, 16762624, 16763136, 16763904, 16764672, 16765184, 16765952, 16766464, 
            16767232, 16768000, 16768512, 16769280, 16770048, 16770560, 16771328, 16771840, 
            16772608, 16773376, 16773888, 16774656, 16775424, 16775936, 16776704, 16776962, 
            16776966, 16776970, 16776974, 16776978, 16776982, 16776986, 16776990, 16776994, 
            16776998, 16777002, 16777006, 16777010, 16777014, 16777018, 16777022, 16777025, 
            16777029, 16777033, 16777037, 16777041, 16777045, 16777049, 16777053, 16777057, 
            16777061, 16777065, 16777069, 16777073, 16777077, 16777081, 16777085, 16777088, 
            16777092, 16777096, 16777100, 16777104, 16777108, 16777112, 16777116, 16777120, 
            16777124, 16777128, 16777132, 16777136, 16777140, 16777144, 16777148, 16777151, 
            16777155, 16777159, 16777163, 16777167, 16777171, 16777175, 16777179, 16777183, 
            16777187, 16777191, 16777195, 16777199, 16777203, 16777207, 16777211, 16777215, 
        };
    }
}
