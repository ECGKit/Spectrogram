using System;

namespace Spectrogram.Colormaps
{
    class Winter : IColormap
    {
        public (byte r, byte g, byte b) GetRGB(byte value)
        {
            byte[] bytes = BitConverter.GetBytes(rgb[value]);
            return (bytes[2], bytes[1], bytes[0]);
        }

        // RGB values are derived from the Winter colormap in Matplotlib 3.2.1 (https://matplotlib.org)
        private readonly int[] rgb =
        {
            00000255, 00000510, 00000766, 00001021, 00001277, 00001532, 00001788, 00002043, 
            00002299, 00002554, 00002810, 00003065, 00003321, 00003576, 00003832, 00004087, 
            00004343, 00004598, 00004854, 00005109, 00005365, 00005620, 00005876, 00006131, 
            00006387, 00006642, 00006898, 00007153, 00007409, 00007664, 00007920, 00008175, 
            00008431, 00008430, 00008942, 00009197, 00009453, 00009452, 00009964, 00010219, 
            00010475, 00010474, 00010986, 00011241, 00011497, 00011496, 00012008, 00012263, 
            00012519, 00012518, 00013030, 00013285, 00013541, 00013540, 00014052, 00014307, 
            00014563, 00014562, 00015074, 00015329, 00015585, 00015584, 00016096, 00016351, 
            00016607, 00016862, 00016862, 00017373, 00017629, 00017884, 00018140, 00018395, 
            00018651, 00018906, 00018906, 00019417, 00019673, 00019928, 00020184, 00020439, 
            00020695, 00020950, 00020950, 00021461, 00021717, 00021972, 00022227, 00022483, 
            00022739, 00022994, 00022994, 00023505, 00023761, 00024016, 00024272, 00024527, 
            00024783, 00025038, 00025038, 00025549, 00025805, 00026060, 00026316, 00026571, 
            00026827, 00027082, 00027082, 00027593, 00027849, 00028104, 00028360, 00028615, 
            00028871, 00029126, 00029126, 00029637, 00029893, 00030148, 00030403, 00030659, 
            00030915, 00031170, 00031170, 00031681, 00031937, 00032192, 00032448, 00032703, 
            00032959, 00033214, 00033470, 00033725, 00033725, 00034236, 00034492, 00034747, 
            00035003, 00035258, 00035514, 00035769, 00036025, 00036280, 00036536, 00036791, 
            00037047, 00037302, 00037558, 00037813, 00037813, 00038324, 00038579, 00038835, 
            00039091, 00039346, 00039602, 00039857, 00040113, 00040368, 00040624, 00040879, 
            00041135, 00041390, 00041646, 00041901, 00041901, 00042412, 00042668, 00042923, 
            00043179, 00043434, 00043690, 00043945, 00044201, 00044456, 00044712, 00044967, 
            00045223, 00045478, 00045734, 00045989, 00045989, 00046500, 00046755, 00047011, 
            00047267, 00047522, 00047778, 00048033, 00048289, 00048544, 00048800, 00049055, 
            00049311, 00049566, 00049822, 00050077, 00050077, 00050588, 00050844, 00051099, 
            00051355, 00051610, 00051866, 00052121, 00052377, 00052632, 00052888, 00053143, 
            00053399, 00053654, 00053910, 00054165, 00054165, 00054676, 00054931, 00055187, 
            00055443, 00055698, 00055954, 00056209, 00056465, 00056720, 00056976, 00057231, 
            00057487, 00057742, 00057998, 00058253, 00058253, 00058764, 00059020, 00059275, 
            00059531, 00059786, 00060042, 00060297, 00060553, 00060808, 00061064, 00061319, 
            00061575, 00061830, 00062086, 00062341, 00062341, 00062852, 00063107, 00063363, 
            00063619, 00063874, 00064130, 00064385, 00064641, 00064896, 00065152, 00065407, 
        };
    }
}
