using System;

namespace Spectrogram.Colormaps
{
    class Bwr : IColormap
    {
        public (byte r, byte g, byte b) GetRGB(byte value)
        {
            byte[] bytes = BitConverter.GetBytes(rgb[value]);
            return (bytes[2], bytes[1], bytes[0]);
        }

        // RGB values are derived from the Bwr colormap in Matplotlib 3.2.1 (https://matplotlib.org)
        private readonly int[] rgb =
        {
            00000255, 00131839, 00263423, 00395007, 00526591, 00658175, 00789759, 00921343, 
            01052927, 01184511, 01316095, 01447679, 01579263, 01710847, 01842431, 01974015, 
            02105599, 02237183, 02368767, 02500351, 02631935, 02763519, 02895103, 03026687, 
            03158271, 03289855, 03421439, 03553023, 03684607, 03816191, 03947775, 04079359, 
            04210943, 04276735, 04474111, 04605695, 04737279, 04803071, 05000447, 05132031, 
            05263615, 05329407, 05526783, 05658367, 05789951, 05855743, 06053119, 06184703, 
            06316287, 06382079, 06579455, 06711039, 06842623, 06908415, 07105791, 07237375, 
            07368959, 07434751, 07632127, 07763711, 07895295, 07961087, 08158463, 08290047, 
            08421631, 08553215, 08619007, 08816383, 08947967, 09079551, 09211135, 09342719, 
            09474303, 09605887, 09671679, 09869055, 10000639, 10132223, 10263807, 10395391, 
            10526975, 10658559, 10724351, 10921727, 11053311, 11184895, 11316479, 11448063, 
            11579647, 11711231, 11777023, 11974399, 12105983, 12237567, 12369151, 12500735, 
            12632319, 12763903, 12829695, 13027071, 13158655, 13290239, 13421823, 13553407, 
            13684991, 13816575, 13882367, 14079743, 14211327, 14342911, 14474495, 14606079, 
            14737663, 14869247, 14935039, 15132415, 15263999, 15395583, 15527167, 15658751, 
            15790335, 15921919, 15987711, 16185087, 16316671, 16448255, 16579839, 16711423, 
            16776958, 16776444, 16775930, 16775416, 16774902, 16774388, 16773874, 16773360, 
            16772846, 16772332, 16771818, 16771304, 16770790, 16770276, 16769762, 16769248, 
            16768734, 16768220, 16767706, 16767192, 16766678, 16765907, 16765650, 16765136, 
            16764622, 16764108, 16763594, 16763080, 16762566, 16761795, 16761538, 16761024, 
            16760510, 16759996, 16759482, 16758968, 16758454, 16757683, 16757426, 16756912, 
            16756398, 16755884, 16755370, 16754856, 16754342, 16753571, 16753314, 16752800, 
            16752286, 16751772, 16751258, 16750744, 16750230, 16749459, 16749202, 16748688, 
            16748174, 16747660, 16747146, 16746632, 16746118, 16745347, 16745090, 16744576, 
            16744062, 16743548, 16742777, 16742520, 16742006, 16741492, 16740721, 16740464, 
            16739950, 16739436, 16738665, 16738408, 16737894, 16737380, 16736609, 16736352, 
            16735838, 16735324, 16734553, 16734296, 16733782, 16733268, 16732497, 16732240, 
            16731726, 16731212, 16730441, 16730184, 16729670, 16729156, 16728385, 16728128, 
            16727614, 16727100, 16726329, 16726072, 16725558, 16725044, 16724273, 16724016, 
            16723502, 16722988, 16722217, 16721960, 16721446, 16720932, 16720161, 16719904, 
            16719390, 16718876, 16718105, 16717848, 16717334, 16716820, 16716049, 16715792, 
            16715278, 16714764, 16713993, 16713736, 16713222, 16712708, 16711937, 16711680, 
        };
    }
}
