using System;

namespace Spectrogram.Colormaps
{
    class Copper : IColormap
    {
        public (byte r, byte g, byte b) GetRGB(byte value)
        {
            byte[] bytes = BitConverter.GetBytes(rgb[value]);
            return (bytes[2], bytes[1], bytes[0]);
        }

        // RGB values are derived from the Copper colormap in Matplotlib 3.2.1 (https://matplotlib.org)
        private readonly int[] rgb =
        {
            00000000, 00065536, 00131328, 00197121, 00262913, 00393986, 00459778, 00525571, 
            00591363, 00722692, 00788228, 00854021, 00919813, 01051142, 01116678, 01182471, 
            01248263, 01314056, 01445384, 01510921, 01576713, 01642506, 01773834, 01839371, 
            01905163, 01970956, 02102284, 02168077, 02233613, 02299406, 02430734, 02496527, 
            02562063, 02627856, 02693648, 02824977, 02890769, 02956306, 03022098, 03153427, 
            03219219, 03285012, 03350548, 03481877, 03547669, 03613462, 03678998, 03810327, 
            03876119, 03941912, 04007704, 04073241, 04204569, 04270362, 04336154, 04401691, 
            04533019, 04598812, 04664604, 04730397, 04861469, 04927262, 04993054, 05058847, 
            05189919, 05255712, 05321504, 05387297, 05453089, 05584162, 05649954, 05715747, 
            05781539, 05912868, 05978404, 06044197, 06109989, 06241318, 06306854, 06372647, 
            06438439, 06569768, 06635560, 06701097, 06766889, 06832682, 06964010, 07029547, 
            07095339, 07161132, 07292460, 07358253, 07423789, 07489582, 07620910, 07686703, 
            07752239, 07818032, 07949360, 08015153, 08080945, 08146482, 08212274, 08343603, 
            08409395, 08475188, 08540724, 08672053, 08737845, 08803638, 08869174, 09000503, 
            09066295, 09132088, 09197880, 09328953, 09394745, 09460538, 09526330, 09591867, 
            09723195, 09788988, 09854780, 09920573, 10051645, 10117438, 10183230, 10249023, 
            10380095, 10445888, 10511680, 10577473, 10708801, 10774338, 10840130, 10905923, 
            10971715, 11103044, 11168580, 11234373, 11300165, 11431494, 11497030, 11562823, 
            11628615, 11759944, 11825736, 11891273, 11957065, 12088394, 12154186, 12219723, 
            12285515, 12351308, 12482636, 12548429, 12613965, 12679758, 12811086, 12876879, 
            12942415, 13008208, 13139536, 13205329, 13271121, 13336658, 13467986, 13533779, 
            13599571, 13665364, 13730900, 13862229, 13928021, 13993814, 14059350, 14190679, 
            14256471, 14322264, 14388056, 14519129, 14584921, 14650714, 14716506, 14847579, 
            14913371, 14979164, 15044956, 15110749, 15241821, 15307614, 15373406, 15439199, 
            15570271, 15636064, 15701856, 15767649, 15898977, 15964514, 16030306, 16096099, 
            16227427, 16293219, 16358756, 16424548, 16490341, 16621669, 16687206, 16752998, 
            16753255, 16753511, 16753768, 16753768, 16754025, 16754281, 16754538, 16754538, 
            16754795, 16755051, 16755308, 16755564, 16755565, 16755821, 16756078, 16756334, 
            16756335, 16756591, 16756848, 16757104, 16757361, 16757361, 16757618, 16757874, 
            16758131, 16758387, 16758388, 16758644, 16758901, 16759157, 16759158, 16759414, 
            16759671, 16759927, 16760184, 16760184, 16760441, 16760697, 16760954, 16760954, 
            16761211, 16761467, 16761724, 16761980, 16761981, 16762237, 16762494, 16762750, 
        };
    }
}
