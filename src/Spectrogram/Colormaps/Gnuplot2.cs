using System;

namespace Spectrogram.Colormaps
{
    class Gnuplot2 : IColormap
    {
        public (byte r, byte g, byte b) GetRGB(byte value)
        {
            byte[] bytes = BitConverter.GetBytes(rgb[value]);
            return (bytes[2], bytes[1], bytes[0]);
        }

        // RGB values are derived from the Gnuplot2 colormap in Matplotlib 3.2.1 (https://matplotlib.org)
        private readonly int[] rgb =
        {
            00000000, 00000004, 00000008, 00000012, 00000016, 00000020, 00000024, 00000028, 
            00000032, 00000036, 00000040, 00000044, 00000048, 00000052, 00000056, 00000060, 
            00000064, 00000068, 00000072, 00000076, 00000080, 00000084, 00000088, 00000092, 
            00000096, 00000100, 00000104, 00000108, 00000112, 00000116, 00000120, 00000124, 
            00000128, 00000131, 00000136, 00000140, 00000144, 00000147, 00000152, 00000156, 
            00000160, 00000163, 00000168, 00000172, 00000176, 00000179, 00000184, 00000188, 
            00000192, 00000195, 00000200, 00000204, 00000208, 00000211, 00000216, 00000220, 
            00000224, 00000227, 00000232, 00000236, 00000240, 00000243, 00000248, 00000252, 
            00000255, 00196863, 00459007, 00655615, 00852223, 01048831, 01245439, 01442047, 
            01638655, 01835263, 02097407, 02294015, 02490623, 02687231, 02883839, 03080447, 
            03277055, 03473663, 03735807, 03932415, 04129023, 04325631, 04522239, 04718847, 
            04915455, 05112063, 05374207, 05570815, 05767423, 05964031, 06160639, 06357247, 
            06553855, 06750463, 07012607, 07209215, 07405823, 07602431, 07799039, 07995647, 
            08192255, 08388863, 08651007, 08847615, 09044477, 09241595, 09438713, 09635831, 
            09832949, 10030067, 10292721, 10489839, 10686957, 10884075, 11081193, 11278311, 
            11475429, 11672547, 11935201, 12132319, 12329437, 12526555, 12723673, 12920791, 
            13117909, 13315027, 13577681, 13774799, 13971917, 14169035, 14366153, 14563271, 
            14760389, 14957507, 15220161, 15417279, 15614397, 15811515, 16008633, 16205751, 
            16402869, 16599987, 16731569, 16732079, 16732589, 16733099, 16733609, 16734119, 
            16734629, 16735139, 16735649, 16736159, 16736669, 16737179, 16737689, 16738199, 
            16738709, 16739219, 16739729, 16740239, 16740749, 16741259, 16741769, 16742279, 
            16742789, 16743299, 16743809, 16744319, 16744829, 16745339, 16745849, 16746359, 
            16746869, 16747379, 16747889, 16748399, 16748909, 16749419, 16749929, 16750439, 
            16750949, 16751459, 16751969, 16752479, 16752989, 16753499, 16754009, 16754519, 
            16755029, 16755539, 16756049, 16756559, 16757069, 16757579, 16758089, 16758599, 
            16759109, 16759619, 16760129, 16760639, 16761149, 16761659, 16762169, 16762679, 
            16763189, 16763699, 16764209, 16764719, 16765229, 16765739, 16766249, 16766759, 
            16767269, 16767779, 16768289, 16768799, 16769309, 16769819, 16770329, 16770839, 
            16771349, 16771859, 16772369, 16772879, 16773389, 16773899, 16774409, 16774919, 
            16775429, 16775939, 16776449, 16776964, 16776977, 16776989, 16777002, 16777014, 
            16777027, 16777039, 16777052, 16777064, 16777077, 16777090, 16777102, 16777114, 
            16777127, 16777139, 16777152, 16777164, 16777177, 16777190, 16777202, 16777215, 
        };
    }
}
