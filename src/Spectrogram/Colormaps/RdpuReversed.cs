using System;

namespace Spectrogram.Colormaps
{
    class RdpuReversed : IColormap
    {
        public (byte r, byte g, byte b) GetRGB(byte value)
        {
            byte[] bytes = BitConverter.GetBytes(rgb[value]);
            return (bytes[2], bytes[1], bytes[0]);
        }

        // RGB values are derived from the RdpuReversed colormap in Matplotlib 3.2.1 (https://matplotlib.org)
        private readonly int[] rgb =
        {
            04784234, 04849770, 04980842, 05046379, 05177451, 05242988, 05374060, 05439596, 
            05570669, 05636205, 05767278, 05832814, 05963886, 06029423, 06160495, 06291568, 
            06357104, 06488176, 06553713, 06684785, 06750322, 06881394, 06946930, 07078003, 
            07143539, 07274612, 07340148, 07471221, 07602293, 07667829, 07798902, 07864438, 
            07995767, 08061303, 08192375, 08323447, 08388983, 08520056, 08585592, 08716664, 
            08847736, 08913273, 09044345, 09175417, 09240953, 09372025, 09503098, 09568634, 
            09699706, 09765242, 09896314, 10027387, 10092923, 10223995, 10355067, 10420604, 
            10551676, 10617212, 10748284, 10879356, 10944893, 11075965, 11207037, 11272573, 
            11403646, 11469694, 11601023, 11667072, 11798401, 11864450, 11996034, 12061827, 
            12193412, 12259205, 12390790, 12456838, 12588167, 12654216, 12785545, 12851593, 
            12917642, 13048971, 13115020, 13246349, 13312397, 13443982, 13509775, 13641360, 
            13707153, 13838737, 13904530, 14036115, 14102164, 14233492, 14299541, 14431126, 
            14496919, 14562967, 14563223, 14629272, 14695320, 14761112, 14827161, 14893209, 
            14893465, 14959513, 15025306, 15091354, 15157402, 15157659, 15223707, 15289755, 
            15355548, 15421596, 15421852, 15487901, 15553949, 15619741, 15685790, 15751838, 
            15752094, 15818142, 15884191, 15949983, 16016031, 16016288, 16082336, 16148384, 
            16214177, 16214689, 16215202, 16215715, 16215971, 16216484, 16216997, 16217253, 
            16217766, 16218278, 16218791, 16284584, 16285096, 16285609, 16286122, 16286378, 
            16286891, 16287403, 16287660, 16288173, 16288685, 16354734, 16354991, 16355503, 
            16356016, 16356529, 16356785, 16357298, 16357810, 16358067, 16358580, 16359092, 
            16424885, 16425141, 16425653, 16425910, 16426166, 16426422, 16426679, 16427191, 
            16427447, 16427704, 16427960, 16428217, 16428729, 16428985, 16429242, 16429498, 
            16495290, 16495803, 16496059, 16496315, 16496572, 16496828, 16497084, 16497597, 
            16497853, 16498109, 16498366, 16498622, 16499134, 16499391, 16499647, 16499903, 
            16565696, 16565953, 16566210, 16566467, 16566724, 16566725, 16566982, 16567239, 
            16567495, 16567752, 16568009, 16568010, 16568267, 16568524, 16568781, 16569038, 
            16569295, 16569552, 16569553, 16569809, 16570066, 16570323, 16570580, 16570837, 
            16570838, 16571095, 16571352, 16571609, 16571866, 16572123, 16572379, 16572380, 
            16638173, 16638430, 16638686, 16638687, 16638944, 16639201, 16639201, 16639458, 
            16639715, 16639971, 16639972, 16640229, 16640485, 16640742, 16640743, 16640999, 
            16706792, 16706793, 16707050, 16707306, 16707563, 16707564, 16707820, 16708077, 
            16708078, 16708334, 16708591, 16708848, 16708848, 16709105, 16709362, 16775155, 
        };
    }
}
