using System;

namespace Spectrogram.Colormaps
{
    class Coolwarm : IColormap
    {
        public (byte r, byte g, byte b) GetRGB(byte value)
        {
            byte[] bytes = BitConverter.GetBytes(rgb[value]);
            return (bytes[2], bytes[1], bytes[0]);
        }

        // RGB values are derived from the Coolwarm colormap in Matplotlib 3.2.1 (https://matplotlib.org)
        private readonly int[] rgb =
        {
            03820736, 03886529, 03952579, 04084164, 04150214, 04216007, 04282057, 04348106, 
            04414156, 04545485, 04611535, 04677584, 04743377, 04809427, 04941012, 05007062, 
            05072855, 05138904, 05270490, 05336283, 05402332, 05468381, 05599710, 05665760, 
            05731809, 05797602, 05929187, 05994980, 06061029, 06127078, 06258407, 06324456, 
            06390506, 06521834, 06587883, 06653676, 06785261, 06851054, 06917103, 07048688, 
            07114481, 07180529, 07311858, 07377907, 07443700, 07575028, 07641077, 07706870, 
            07838454, 07904247, 08035832, 08101624, 08167673, 08299001, 08364794, 08430842, 
            08562171, 08627963, 08759547, 08825340, 08891132, 09022716, 09088509, 09154301, 
            09285629, 09351677, 09483006, 09548798, 09614590, 09745918, 09811966, 09943294, 
            10009086, 10074878, 10206206, 10271998, 10337790, 10469118, 10534910, 10666238, 
            10732030, 10797822, 10929149, 10994941, 11060733, 11192061, 11257852, 11323644, 
            11454972, 11520763, 11586555, 11717627, 11783418, 11849210, 11980537, 12046329, 
            12111864, 12177656, 12308983, 12374518, 12440310, 12506101, 12637173, 12702964, 
            12768499, 12834290, 12965362, 13031153, 13096688, 13162479, 13228014, 13293806, 
            13424877, 13490668, 13556203, 13621738, 13687529, 13753064, 13818599, 13884390, 
            14015461, 14080996, 14146530, 14212065, 14277856, 14343391, 14408926, 14474461, 
            14539995, 14605274, 14670809, 14736087, 14801622, 14866900, 14932435, 14997713, 
            15063248, 15128527, 15193805, 15193804, 15259082, 15324361, 15389639, 15455174, 
            15520452, 15520195, 15585473, 15585216, 15650750, 15716028, 15715771, 15781049, 
            15846328, 15846070, 15911349, 15911091, 15910834, 15976112, 15975855, 16041133, 
            16040875, 16040618, 16105896, 16105639, 16105381, 16170404, 16170146, 16169888, 
            16169631, 16169373, 16168860, 16168602, 16233880, 16233367, 16233109, 16232852, 
            16232594, 16232081, 16231823, 16165773, 16165516, 16165258, 16164745, 16164487, 
            16163974, 16163716, 16097666, 16097409, 16096895, 16031102, 16030588, 16030331, 
            15964281, 15963768, 15963510, 15897461, 15896947, 15831154, 15830640, 15764847, 
            15764333, 15698284, 15632234, 15631977, 15565927, 15499878, 15499364, 15433571, 
            15367521, 15367008, 15300958, 15234909, 15168860, 15103066, 15102553, 15036503, 
            14970454, 14904404, 14838355, 14772306, 14706256, 14640207, 14574158, 14508108, 
            14442059, 14376010, 14309960, 14243911, 14177862, 14111812, 14045763, 13913922, 
            13847872, 13781823, 13715774, 13583933, 13517884, 13451834, 13385529, 13253944, 
            13187895, 13121589, 12989748, 12923443, 12857394, 12725553, 12659248, 12527662, 
            12460845, 12328748, 12261931, 12129834, 12063017, 11930920, 11864103, 11731750, 
        };
    }
}
