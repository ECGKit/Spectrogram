using System;

namespace Spectrogram.Colormaps
{
    class SpectralReversed : IColormap
    {
        public (byte r, byte g, byte b) GetRGB(byte value)
        {
            byte[] bytes = BitConverter.GetBytes(rgb[value]);
            return (bytes[2], bytes[1], bytes[0]);
        }

        // RGB values are derived from the SpectralReversed colormap in Matplotlib 3.2.1 (https://matplotlib.org)
        private readonly int[] rgb =
        {
            06180770, 06050211, 05919652, 05789093, 05724070, 05593767, 05463208, 05332649, 
            05267626, 05137323, 05006764, 04941741, 04811182, 04680879, 04550320, 04485297, 
            04354738, 04224436, 04093877, 04028854, 03898295, 03767736, 03702969, 03572410, 
            03441851, 03311292, 03377596, 03509179, 03640762, 03772345, 03904184, 04035767, 
            04167350, 04299189, 04430773, 04562356, 04693939, 04825778, 04957361, 05088944, 
            05220527, 05352366, 05483949, 05615532, 05747371, 05878954, 06010537, 06142120, 
            06273959, 06405542, 06537125, 06734501, 06865828, 07062692, 07259556, 07390884, 
            07587748, 07784612, 07915940, 08112804, 08309668, 08506532, 08637860, 08834724, 
            09031588, 09162916, 09359780, 09556644, 09753764, 09885092, 10081956, 10278820, 
            10410148, 10607012, 10803876, 10935204, 11132068, 11328931, 11460259, 11591586, 
            11788450, 11919777, 12051105, 12247968, 12379296, 12510624, 12641695, 12838559, 
            12969886, 13101214, 13298077, 13429405, 13560732, 13757596, 13888923, 14020251, 
            14217114, 14348442, 14479769, 14676633, 14807960, 14939288, 15136152, 15136153, 
            15201691, 15267484, 15333022, 15398559, 15464353, 15529890, 15595684, 15661221, 
            15726759, 15792552, 15858090, 15923883, 15989421, 16054958, 16120752, 16186290, 
            16252083, 16317621, 16383158, 16448952, 16514489, 16580283, 16645820, 16711358, 
            16711357, 16711099, 16710585, 16710327, 16710069, 16709811, 16709553, 16709039, 
            16708781, 16708523, 16708265, 16708007, 16707493, 16707235, 16706977, 16706719, 
            16706205, 16705947, 16705689, 16705431, 16705173, 16704659, 16704401, 16704143, 
            16703885, 16703627, 16637577, 16637063, 16636550, 16636036, 16635522, 16635009, 
            16634495, 16633981, 16633468, 16632954, 16632440, 16631927, 16631413, 16630899, 
            16630386, 16629872, 16629359, 16628845, 16628331, 16627818, 16627304, 16626790, 
            16626277, 16625763, 16625249, 16559200, 16558687, 16557918, 16491868, 16491099, 
            16490330, 16424281, 16423512, 16422999, 16356693, 16356180, 16289875, 16289362, 
            16288593, 16222543, 16221774, 16221005, 16154956, 16154187, 16153674, 16087368, 
            16086855, 16086086, 16020037, 16019268, 16018755, 15887171, 15821123, 15755076, 
            15689028, 15557445, 15491397, 15425606, 15359558, 15293511, 15161927, 15095880, 
            15029832, 14964041, 14832457, 14766410, 14700362, 14634315, 14568267, 14436683, 
            14370892, 14304844, 14238797, 14172749, 14041166, 13975118, 13843534, 13711950, 
            13580365, 13448525, 13316940, 13185100, 12987979, 12856395, 12724554, 12592970, 
            12461129, 12329545, 12197960, 12000584, 11868999, 11737159, 11605574, 11473990, 
            11342149, 11145029, 11013188, 10881604, 10750019, 10618179, 10486594, 10355010, 
        };
    }
}
